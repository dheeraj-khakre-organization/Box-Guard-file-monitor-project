package com.metron.boxguard.service;


import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

@Service
@Slf4j
public class MalwareBazaarService {

    private final RestTemplate restTemplate;
    private final String apiKey;
    private final String apiUrl;

    public MalwareBazaarService(RestTemplate restTemplate, @Value("${malwarebazaar.api-key}") String apiKey,
                                @Value("${malwarebazaar.base-url}") String apiUrl) {
        this.restTemplate = restTemplate;
        this.apiKey = apiKey;
        this.apiUrl = apiUrl;
    }

    public boolean isHashMalicious(String sha256) {
        HttpHeaders headers = new HttpHeaders();
        if (apiKey != null && !apiKey.isBlank()) {
            headers.set("Auth-Key", apiKey);
        }
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);

        MultiValueMap<String, String> form = new LinkedMultiValueMap<>();
        form.add("query", "get_info");
        form.add("hash", sha256);

        HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<>(form, headers);

        try {
            ResponseEntity<String> response = restTemplate.postForEntity(apiUrl, request, String.class);
            JsonNode root = new ObjectMapper().readTree(response.getBody());
            String status = root.path("query_status").asText();
            log.info(status);
            return !"hash_not_found".equalsIgnoreCase(status);
        } catch (Exception e) {
            log.error("MalwareBazaar API failed: {}", e.getMessage());
            return false;
        }
    }
}

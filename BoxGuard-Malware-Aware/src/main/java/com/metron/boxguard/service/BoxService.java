package com.metron.boxguard.service;


import com.box.sdk.*;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.codec.digest.DigestUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

@Service
@Slf4j
public class BoxService {
    private  final RestTemplate restTemplate;
    private final BoxAPIConnection api;

    public BoxService(RestTemplate restTemplate, @Value("${box.developer-token}") String developerToken) {
        this.restTemplate = restTemplate;
        this.api = new BoxAPIConnection(developerToken);
    }

    public void registerWebhook(String folderId, String webhookUrl) {
        String url = "https://api.box.com/2.0/webhooks";

        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(api.getAccessToken());
        headers.setContentType(MediaType.APPLICATION_JSON);

        Map<String, Object> body = new HashMap<>();
        Map<String, String> target = new HashMap<>();
        target.put("id", folderId);
        target.put("type", "folder");

        body.put("target", target);
        body.put("triggers", Collections.singletonList("FILE.UPLOADED"));
        body.put("address", webhookUrl);

        HttpEntity<Map<String, Object>> request = new HttpEntity<>(body, headers);
        try {
            ResponseEntity<String> response = restTemplate.postForEntity(url, request, String.class);
            log.info(" Webhook created: {}", response.getBody());
        } catch (Exception e) {
            log.error(" Webhook registration failed: {}", e.getMessage());
        }
    }

    public void processUploadedFile(String fileId, MalwareBazaarService mbService) {
        try {
            BoxFile file = new BoxFile(api, fileId);
            BoxFile.Info info = file.getInfo();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            file.download(baos);
            byte[] data = baos.toByteArray();

            String sha256 = DigestUtils.sha256Hex(data);
            log.info("File uploaded: {}", info.getName());
            log.info("Calculated SHA256: {}", sha256);

            if (mbService.isHashMalicious(sha256)) {
                log.info(" File is malicious â€” deleting...");
                file.delete();

                String placeholder = "CLEANED UP: This file was removed due to detection as malware.";
                BoxFolder folder = new BoxFolder(api, info.getParent().getID());
                InputStream placeholderStream = new ByteArrayInputStream(placeholder.getBytes(StandardCharsets.UTF_8));
                folder.uploadFile(placeholderStream, info.getName());
                log.info(" Placeholder uploaded instead.");
            } else {
                log.info("File is clean.");
            }
        } catch (Exception e) {
            log.error("Failed to process uploaded file: {}", e.getMessage());
        }
    }
}
